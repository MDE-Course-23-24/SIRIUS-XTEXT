/**
 * generated by Xtext 2.32.0
 */
package it.univaq.disim.usecase.statemachine.xtext.formatting2;

import com.google.inject.Inject;
import it.univaq.disim.usecase.statemachine.xtext.services.StateMachineDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import statemachine.Command;
import statemachine.State;
import statemachine.StateMachine;
import statemachine.Transition;

@SuppressWarnings("all")
public class StateMachineDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private StateMachineDslGrammarAccess _stateMachineDslGrammarAccess;

  protected void _format(final StateMachine stateMachine, @Extension final IFormattableDocument document) {
    EList<State> _states = stateMachine.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
    EList<Transition> _transtions = stateMachine.getTranstions();
    for (final Transition transition : _transtions) {
      document.<Transition>format(transition);
    }
  }

  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Command> _actions = state.getActions();
    for (final Command command : _actions) {
      document.<Command>format(command);
    }
  }

  public void format(final Object state, final IFormattableDocument document) {
    if (state instanceof XtextResource) {
      _format((XtextResource)state, document);
      return;
    } else if (state instanceof State) {
      _format((State)state, document);
      return;
    } else if (state instanceof StateMachine) {
      _format((StateMachine)state, document);
      return;
    } else if (state instanceof EObject) {
      _format((EObject)state, document);
      return;
    } else if (state == null) {
      _format((Void)null, document);
      return;
    } else if (state != null) {
      _format(state, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(state, document).toString());
    }
  }
}
