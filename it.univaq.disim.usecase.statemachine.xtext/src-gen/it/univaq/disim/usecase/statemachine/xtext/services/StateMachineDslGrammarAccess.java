/*
 * generated by Xtext 2.32.0
 */
package it.univaq.disim.usecase.statemachine.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_4_2_0 = (RuleCall)cStatesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cStatesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_4_3_1_0 = (RuleCall)cStatesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTranstionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTranstionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTranstionsTransitionParserRuleCall_5_2_0 = (RuleCall)cTranstionsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cTranstionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cTranstionsTransitionParserRuleCall_5_3_1_0 = (RuleCall)cTranstionsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachine returns StateMachine:
		//    {StateMachine}
		//    'StateMachine'
		//    name=EString
		//    '{'
		//        ('states' '{' states+=State ( "," states+=State)* '}' )?
		//        ('transtions' '{' transtions+=Transition ( "," transtions+=Transition)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StateMachine}
		//'StateMachine'
		//name=EString
		//'{'
		//    ('states' '{' states+=State ( "," states+=State)* '}' )?
		//    ('transtions' '{' transtions+=Transition ( "," transtions+=Transition)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{StateMachine}
		public Action getStateMachineAction_0() { return cStateMachineAction_0; }
		
		//'StateMachine'
		public Keyword getStateMachineKeyword_1() { return cStateMachineKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('states' '{' states+=State ( "," states+=State)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'states'
		public Keyword getStatesKeyword_4_0() { return cStatesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//states+=State
		public Assignment getStatesAssignment_4_2() { return cStatesAssignment_4_2; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_2_0() { return cStatesStateParserRuleCall_4_2_0; }
		
		//( "," states+=State)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//states+=State
		public Assignment getStatesAssignment_4_3_1() { return cStatesAssignment_4_3_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_3_1_0() { return cStatesStateParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('transtions' '{' transtions+=Transition ( "," transtions+=Transition)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'transtions'
		public Keyword getTranstionsKeyword_5_0() { return cTranstionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//transtions+=Transition
		public Assignment getTranstionsAssignment_5_2() { return cTranstionsAssignment_5_2; }
		
		//Transition
		public RuleCall getTranstionsTransitionParserRuleCall_5_2_0() { return cTranstionsTransitionParserRuleCall_5_2_0; }
		
		//( "," transtions+=Transition)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//transtions+=Transition
		public Assignment getTranstionsAssignment_5_3_1() { return cTranstionsAssignment_5_3_1; }
		
		//Transition
		public RuleCall getTranstionsTransitionParserRuleCall_5_3_1_0() { return cTranstionsTransitionParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActionsCommandParserRuleCall_4_2_0 = (RuleCall)cActionsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cActionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cActionsCommandParserRuleCall_4_3_1_0 = (RuleCall)cActionsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State returns State:
		//    {State}
		//    'State'
		//    name=EString
		//    '{'
		//        ('actions' '{' actions+=Command ( "," actions+=Command)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{State}
		//'State'
		//name=EString
		//'{'
		//    ('actions' '{' actions+=Command ( "," actions+=Command)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'State'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('actions' '{' actions+=Command ( "," actions+=Command)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//actions+=Command
		public Assignment getActionsAssignment_4_2() { return cActionsAssignment_4_2; }
		
		//Command
		public RuleCall getActionsCommandParserRuleCall_4_2_0() { return cActionsCommandParserRuleCall_4_2_0; }
		
		//( "," actions+=Command)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//actions+=Command
		public Assignment getActionsAssignment_4_3_1() { return cActionsAssignment_4_3_1; }
		
		//Command
		public RuleCall getActionsCommandParserRuleCall_4_3_1_0() { return cActionsCommandParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceStateCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_3_0_1 = (RuleCall)cSourceStateCrossReference_3_0.eContents().get(1);
		private final Keyword cTargetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetStateCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_5_0_1 = (RuleCall)cTargetStateCrossReference_5_0.eContents().get(1);
		private final Keyword cTriggerKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTriggerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTriggerEventParserRuleCall_7_0 = (RuleCall)cTriggerAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Transition returns Transition:
		//    'Transition'
		//    '{'
		//        'source' source=[State|EString]
		//        'target' target=[State|EString]
		//        'trigger' trigger=Event
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition'
		//'{'
		//    'source' source=[State|EString]
		//    'target' target=[State|EString]
		//    'trigger' trigger=Event
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'source'
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }
		
		//source=[State|EString]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[State|EString]
		public CrossReference getSourceStateCrossReference_3_0() { return cSourceStateCrossReference_3_0; }
		
		//EString
		public RuleCall getSourceStateEStringParserRuleCall_3_0_1() { return cSourceStateEStringParserRuleCall_3_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_4() { return cTargetKeyword_4; }
		
		//target=[State|EString]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[State|EString]
		public CrossReference getTargetStateCrossReference_5_0() { return cTargetStateCrossReference_5_0; }
		
		//EString
		public RuleCall getTargetStateEStringParserRuleCall_5_0_1() { return cTargetStateEStringParserRuleCall_5_0_1; }
		
		//'trigger'
		public Keyword getTriggerKeyword_6() { return cTriggerKeyword_6; }
		
		//trigger=Event
		public Assignment getTriggerAssignment_7() { return cTriggerAssignment_7; }
		
		//Event
		public RuleCall getTriggerEventParserRuleCall_7_0() { return cTriggerEventParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCodeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCodeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCodeEStringParserRuleCall_2_1_0 = (RuleCall)cCodeAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Command returns Command:
		//    {Command}
		//    'Command'
		//    ('code' code=EString)? ':' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Command}
		//'Command'
		//('code' code=EString)? ':' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Command}
		public Action getCommandAction_0() { return cCommandAction_0; }
		
		//'Command'
		public Keyword getCommandKeyword_1() { return cCommandKeyword_1; }
		
		//('code' code=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'code'
		public Keyword getCodeKeyword_2_0() { return cCodeKeyword_2_0; }
		
		//code=EString
		public Assignment getCodeAssignment_2_1() { return cCodeAssignment_2_1; }
		
		//EString
		public RuleCall getCodeEStringParserRuleCall_2_1_0() { return cCodeEStringParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCodeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCodeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCodeEStringParserRuleCall_2_1_0 = (RuleCall)cCodeAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Event returns Event:
		//    {Event}
		//    'Event'
		//    ('code' code=EString)? ':' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event}
		//'Event'
		//('code' code=EString)? ':' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'Event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//('code' code=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'code'
		public Keyword getCodeKeyword_2_0() { return cCodeKeyword_2_0; }
		
		//code=EString
		public Assignment getCodeAssignment_2_1() { return cCodeAssignment_2_1; }
		
		//EString
		public RuleCall getCodeEStringParserRuleCall_2_1_0() { return cCodeEStringParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final EStringElements pEString;
	private final TransitionElements pTransition;
	private final CommandElements pCommand;
	private final EventElements pEvent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pEString = new EStringElements();
		this.pTransition = new TransitionElements();
		this.pCommand = new CommandElements();
		this.pEvent = new EventElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.univaq.disim.usecase.statemachine.xtext.StateMachineDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine returns StateMachine:
	//    {StateMachine}
	//    'StateMachine'
	//    name=EString
	//    '{'
	//        ('states' '{' states+=State ( "," states+=State)* '}' )?
	//        ('transtions' '{' transtions+=Transition ( "," transtions+=Transition)* '}' )?
	//    '}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//State returns State:
	//    {State}
	//    'State'
	//    name=EString
	//    '{'
	//        ('actions' '{' actions+=Command ( "," actions+=Command)* '}' )?
	//    '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Transition returns Transition:
	//    'Transition'
	//    '{'
	//        'source' source=[State|EString]
	//        'target' target=[State|EString]
	//        'trigger' trigger=Event
	//    '}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Command returns Command:
	//    {Command}
	//    'Command'
	//    ('code' code=EString)? ':' name=EString;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Event returns Event:
	//    {Event}
	//    'Event'
	//    ('code' code=EString)? ':' name=EString;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
