/*
 * generated by Xtext 2.32.0
 */
package it.univaq.disim.usecase.statemachine.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import it.univaq.disim.usecase.statemachine.xtext.ide.contentassist.antlr.internal.InternalStateMachineDslParser;
import it.univaq.disim.usecase.statemachine.xtext.services.StateMachineDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StateMachineDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StateMachineDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StateMachineDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_4(), "rule__StateMachine__Group_4__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_4_3(), "rule__StateMachine__Group_4_3__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_5(), "rule__StateMachine__Group_5__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_5_3(), "rule__StateMachine__Group_5_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4_3(), "rule__State__Group_4_3__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
			builder.put(grammarAccess.getStateMachineAccess().getNameAssignment_2(), "rule__StateMachine__NameAssignment_2");
			builder.put(grammarAccess.getStateMachineAccess().getStatesAssignment_4_2(), "rule__StateMachine__StatesAssignment_4_2");
			builder.put(grammarAccess.getStateMachineAccess().getStatesAssignment_4_3_1(), "rule__StateMachine__StatesAssignment_4_3_1");
			builder.put(grammarAccess.getStateMachineAccess().getTranstionsAssignment_5_2(), "rule__StateMachine__TranstionsAssignment_5_2");
			builder.put(grammarAccess.getStateMachineAccess().getTranstionsAssignment_5_3_1(), "rule__StateMachine__TranstionsAssignment_5_3_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_4_2(), "rule__State__ActionsAssignment_4_2");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_4_3_1(), "rule__State__ActionsAssignment_4_3_1");
			builder.put(grammarAccess.getTransitionAccess().getSourceAssignment_3(), "rule__Transition__SourceAssignment_3");
			builder.put(grammarAccess.getTransitionAccess().getTargetAssignment_5(), "rule__Transition__TargetAssignment_5");
			builder.put(grammarAccess.getTransitionAccess().getTriggerAssignment_7(), "rule__Transition__TriggerAssignment_7");
			builder.put(grammarAccess.getCommandAccess().getCodeAssignment_2_1(), "rule__Command__CodeAssignment_2_1");
			builder.put(grammarAccess.getCommandAccess().getNameAssignment_4(), "rule__Command__NameAssignment_4");
			builder.put(grammarAccess.getEventAccess().getCodeAssignment_2_1(), "rule__Event__CodeAssignment_2_1");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_4(), "rule__Event__NameAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StateMachineDslGrammarAccess grammarAccess;

	@Override
	protected InternalStateMachineDslParser createParser() {
		InternalStateMachineDslParser result = new InternalStateMachineDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateMachineDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateMachineDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
